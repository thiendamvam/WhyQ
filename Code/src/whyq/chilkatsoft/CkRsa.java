/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package whyq.chilkatsoft;

public class CkRsa {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public CkRsa(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(CkRsa obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        chilkatJNI.delete_CkRsa(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean get_LittleEndian() {
    return chilkatJNI.CkRsa_get_LittleEndian(swigCPtr, this);
  }

  public void put_LittleEndian(boolean newVal) {
    chilkatJNI.CkRsa_put_LittleEndian(swigCPtr, this, newVal);
  }

  public void get_Version(CkString str) {
    chilkatJNI.CkRsa_get_Version(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String version() {
    return chilkatJNI.CkRsa_version(swigCPtr, this);
  }

  public boolean OpenSslVerifyBytes(CkByteData signature, CkByteData outBytes) {
    return chilkatJNI.CkRsa_OpenSslVerifyBytes(swigCPtr, this, CkByteData.getCPtr(signature), signature, CkByteData.getCPtr(outBytes), outBytes);
  }

  public boolean OpenSslSignBytes(CkByteData data, CkByteData outBytes) {
    return chilkatJNI.CkRsa_OpenSslSignBytes(swigCPtr, this, CkByteData.getCPtr(data), data, CkByteData.getCPtr(outBytes), outBytes);
  }

  public boolean OpenSslSignBytesENC(CkByteData data, CkString outStr) {
    return chilkatJNI.CkRsa_OpenSslSignBytesENC(swigCPtr, this, CkByteData.getCPtr(data), data, CkString.getCPtr(outStr), outStr);
  }

  public String openSslSignBytesENC(CkByteData data) {
    return chilkatJNI.CkRsa_openSslSignBytesENC(swigCPtr, this, CkByteData.getCPtr(data), data);
  }

  public boolean OpenSslSignString(String str, CkByteData outBytes) {
    return chilkatJNI.CkRsa_OpenSslSignString(swigCPtr, this, str, CkByteData.getCPtr(outBytes), outBytes);
  }

  public boolean OpenSslSignStringENC(String str, CkString outStr) {
    return chilkatJNI.CkRsa_OpenSslSignStringENC(swigCPtr, this, str, CkString.getCPtr(outStr), outStr);
  }

  public String openSslSignStringENC(String str) {
    return chilkatJNI.CkRsa_openSslSignStringENC(swigCPtr, this, str);
  }

  public boolean OpenSslVerifyBytesENC(String str, CkByteData outBytes) {
    return chilkatJNI.CkRsa_OpenSslVerifyBytesENC(swigCPtr, this, str, CkByteData.getCPtr(outBytes), outBytes);
  }

  public boolean OpenSslVerifyString(CkByteData data, CkString outStr) {
    return chilkatJNI.CkRsa_OpenSslVerifyString(swigCPtr, this, CkByteData.getCPtr(data), data, CkString.getCPtr(outStr), outStr);
  }

  public String openSslVerifyString(CkByteData data) {
    return chilkatJNI.CkRsa_openSslVerifyString(swigCPtr, this, CkByteData.getCPtr(data), data);
  }

  public boolean OpenSslVerifyStringENC(String str, CkString outStr) {
    return chilkatJNI.CkRsa_OpenSslVerifyStringENC(swigCPtr, this, str, CkString.getCPtr(outStr), outStr);
  }

  public String openSslVerifyStringENC(String str) {
    return chilkatJNI.CkRsa_openSslVerifyStringENC(swigCPtr, this, str);
  }

  public boolean VerifyPrivateKey(String xml) {
    return chilkatJNI.CkRsa_VerifyPrivateKey(swigCPtr, this, xml);
  }

  public boolean VerifyHash(CkByteData hashBytes, String hashAlg, CkByteData sigBytes) {
    return chilkatJNI.CkRsa_VerifyHash(swigCPtr, this, CkByteData.getCPtr(hashBytes), hashBytes, hashAlg, CkByteData.getCPtr(sigBytes), sigBytes);
  }

  public boolean VerifyHashENC(String encodedHash, String hashAlg, String encodedSig) {
    return chilkatJNI.CkRsa_VerifyHashENC(swigCPtr, this, encodedHash, hashAlg, encodedSig);
  }

  public boolean SignHash(CkByteData hashBytes, String hashAlg, CkByteData outBytes) {
    return chilkatJNI.CkRsa_SignHash(swigCPtr, this, CkByteData.getCPtr(hashBytes), hashBytes, hashAlg, CkByteData.getCPtr(outBytes), outBytes);
  }

  public boolean SignHashENC(String encodedHash, String hashAlg, CkString outStr) {
    return chilkatJNI.CkRsa_SignHashENC(swigCPtr, this, encodedHash, hashAlg, CkString.getCPtr(outStr), outStr);
  }

  public String signHashENC(String encodedHash, String hashAlg) {
    return chilkatJNI.CkRsa_signHashENC(swigCPtr, this, encodedHash, hashAlg);
  }

  public boolean get_VerboseLogging() {
    return chilkatJNI.CkRsa_get_VerboseLogging(swigCPtr, this);
  }

  public void put_VerboseLogging(boolean newVal) {
    chilkatJNI.CkRsa_put_VerboseLogging(swigCPtr, this, newVal);
  }

  public boolean get_NoUnpad() {
    return chilkatJNI.CkRsa_get_NoUnpad(swigCPtr, this);
  }

  public void put_NoUnpad(boolean newVal) {
    chilkatJNI.CkRsa_put_NoUnpad(swigCPtr, this, newVal);
  }

  public void get_DebugLogFilePath(CkString str) {
    chilkatJNI.CkRsa_get_DebugLogFilePath(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String debugLogFilePath() {
    return chilkatJNI.CkRsa_debugLogFilePath(swigCPtr, this);
  }

  public void put_DebugLogFilePath(String newVal) {
    chilkatJNI.CkRsa_put_DebugLogFilePath(swigCPtr, this, newVal);
  }

  public boolean UnlockComponent(String unlockCode) {
    return chilkatJNI.CkRsa_UnlockComponent(swigCPtr, this, unlockCode);
  }

  public boolean SaveLastError(String filename) {
    return chilkatJNI.CkRsa_SaveLastError(swigCPtr, this, filename);
  }

  public void LastErrorXml(CkString str) {
    chilkatJNI.CkRsa_LastErrorXml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void LastErrorHtml(CkString str) {
    chilkatJNI.CkRsa_LastErrorHtml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void LastErrorText(CkString str) {
    chilkatJNI.CkRsa_LastErrorText(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public boolean VerifyStringENC(String str, String hashAlg, String sig) {
    return chilkatJNI.CkRsa_VerifyStringENC(swigCPtr, this, str, hashAlg, sig);
  }

  public boolean VerifyString(String str, String hashAlg, CkByteData sigData) {
    return chilkatJNI.CkRsa_VerifyString(swigCPtr, this, str, hashAlg, CkByteData.getCPtr(sigData), sigData);
  }

  public boolean VerifyBytesENC(CkByteData bData, String hashAlg, String encodedSig) {
    return chilkatJNI.CkRsa_VerifyBytesENC(swigCPtr, this, CkByteData.getCPtr(bData), bData, hashAlg, encodedSig);
  }

  public boolean VerifyBytes(CkByteData bData, String hashAlg, CkByteData sigData) {
    return chilkatJNI.CkRsa_VerifyBytes(swigCPtr, this, CkByteData.getCPtr(bData), bData, hashAlg, CkByteData.getCPtr(sigData), sigData);
  }

  public String signStringENC(String str, String hashAlg) {
    return chilkatJNI.CkRsa_signStringENC(swigCPtr, this, str, hashAlg);
  }

  public String signBytesENC(CkByteData bData, String hashAlg) {
    return chilkatJNI.CkRsa_signBytesENC(swigCPtr, this, CkByteData.getCPtr(bData), bData, hashAlg);
  }

  public boolean SignStringENC(String str, String hashAlg, CkString out) {
    return chilkatJNI.CkRsa_SignStringENC(swigCPtr, this, str, hashAlg, CkString.getCPtr(out), out);
  }

  public boolean SignBytesENC(CkByteData bData, String hashAlg, CkString out) {
    return chilkatJNI.CkRsa_SignBytesENC(swigCPtr, this, CkByteData.getCPtr(bData), bData, hashAlg, CkString.getCPtr(out), out);
  }

  public boolean DecryptStringENC(String str, boolean bUsePrivateKey, CkString out) {
    return chilkatJNI.CkRsa_DecryptStringENC(swigCPtr, this, str, bUsePrivateKey, CkString.getCPtr(out), out);
  }

  public boolean DecryptString(CkByteData bData, boolean bUsePrivateKey, CkString out) {
    return chilkatJNI.CkRsa_DecryptString(swigCPtr, this, CkByteData.getCPtr(bData), bData, bUsePrivateKey, CkString.getCPtr(out), out);
  }

  public boolean EncryptStringENC(String str, boolean bUsePrivateKey, CkString out) {
    return chilkatJNI.CkRsa_EncryptStringENC(swigCPtr, this, str, bUsePrivateKey, CkString.getCPtr(out), out);
  }

  public boolean EncryptBytesENC(CkByteData bData, boolean bUsePrivateKey, CkString out) {
    return chilkatJNI.CkRsa_EncryptBytesENC(swigCPtr, this, CkByteData.getCPtr(bData), bData, bUsePrivateKey, CkString.getCPtr(out), out);
  }

  public boolean SignString(String str, String hashAlg, CkByteData out) {
    return chilkatJNI.CkRsa_SignString(swigCPtr, this, str, hashAlg, CkByteData.getCPtr(out), out);
  }

  public boolean SignBytes(CkByteData bData, String hashAlg, CkByteData out) {
    return chilkatJNI.CkRsa_SignBytes(swigCPtr, this, CkByteData.getCPtr(bData), bData, hashAlg, CkByteData.getCPtr(out), out);
  }

  public boolean DecryptBytesENC(String str, boolean bUsePrivateKey, CkByteData out) {
    return chilkatJNI.CkRsa_DecryptBytesENC(swigCPtr, this, str, bUsePrivateKey, CkByteData.getCPtr(out), out);
  }

  public boolean DecryptBytes(CkByteData bData, boolean bUsePrivateKey, CkByteData out) {
    return chilkatJNI.CkRsa_DecryptBytes(swigCPtr, this, CkByteData.getCPtr(bData), bData, bUsePrivateKey, CkByteData.getCPtr(out), out);
  }

  public boolean EncryptString(String str, boolean bUsePrivateKey, CkByteData out) {
    return chilkatJNI.CkRsa_EncryptString(swigCPtr, this, str, bUsePrivateKey, CkByteData.getCPtr(out), out);
  }

  public boolean EncryptBytes(CkByteData bData, boolean bUsePrivateKey, CkByteData out) {
    return chilkatJNI.CkRsa_EncryptBytes(swigCPtr, this, CkByteData.getCPtr(bData), bData, bUsePrivateKey, CkByteData.getCPtr(out), out);
  }

  public void get_EncodingMode(CkString out) {
    chilkatJNI.CkRsa_get_EncodingMode(swigCPtr, this, CkString.getCPtr(out), out);
  }

  public void put_EncodingMode(String str) {
    chilkatJNI.CkRsa_put_EncodingMode(swigCPtr, this, str);
  }

  public void get_Charset(CkString out) {
    chilkatJNI.CkRsa_get_Charset(swigCPtr, this, CkString.getCPtr(out), out);
  }

  public void put_Charset(String str) {
    chilkatJNI.CkRsa_put_Charset(swigCPtr, this, str);
  }

  public boolean GenerateKey(int numBits) {
    return chilkatJNI.CkRsa_GenerateKey(swigCPtr, this, numBits);
  }

  public boolean ExportPublicKey(CkString strXml) {
    return chilkatJNI.CkRsa_ExportPublicKey(swigCPtr, this, CkString.getCPtr(strXml), strXml);
  }

  public boolean ExportPrivateKey(CkString strXml) {
    return chilkatJNI.CkRsa_ExportPrivateKey(swigCPtr, this, CkString.getCPtr(strXml), strXml);
  }

  public boolean SnkToXml(String filename, CkString strXml) {
    return chilkatJNI.CkRsa_SnkToXml(swigCPtr, this, filename, CkString.getCPtr(strXml), strXml);
  }

  public boolean ImportPublicKey(String strXml) {
    return chilkatJNI.CkRsa_ImportPublicKey(swigCPtr, this, strXml);
  }

  public boolean ImportPrivateKey(String strXml) {
    return chilkatJNI.CkRsa_ImportPrivateKey(swigCPtr, this, strXml);
  }

  public int get_NumBits() {
    return chilkatJNI.CkRsa_get_NumBits(swigCPtr, this);
  }

  public boolean get_OaepPadding() {
    return chilkatJNI.CkRsa_get_OaepPadding(swigCPtr, this);
  }

  public void put_OaepPadding(boolean newVal) {
    chilkatJNI.CkRsa_put_OaepPadding(swigCPtr, this, newVal);
  }

  public String lastErrorText() {
    return chilkatJNI.CkRsa_lastErrorText(swigCPtr, this);
  }

  public String lastErrorXml() {
    return chilkatJNI.CkRsa_lastErrorXml(swigCPtr, this);
  }

  public String lastErrorHtml() {
    return chilkatJNI.CkRsa_lastErrorHtml(swigCPtr, this);
  }

  public String decryptStringENC(String str, boolean bUsePrivateKey) {
    return chilkatJNI.CkRsa_decryptStringENC(swigCPtr, this, str, bUsePrivateKey);
  }

  public String decryptString(CkByteData data, boolean bUsePrivateKey) {
    return chilkatJNI.CkRsa_decryptString(swigCPtr, this, CkByteData.getCPtr(data), data, bUsePrivateKey);
  }

  public String encryptStringENC(String str, boolean bUsePrivateKey) {
    return chilkatJNI.CkRsa_encryptStringENC(swigCPtr, this, str, bUsePrivateKey);
  }

  public String encryptBytesENC(CkByteData data, boolean bUsePrivateKey) {
    return chilkatJNI.CkRsa_encryptBytesENC(swigCPtr, this, CkByteData.getCPtr(data), data, bUsePrivateKey);
  }

  public String encodingMode() {
    return chilkatJNI.CkRsa_encodingMode(swigCPtr, this);
  }

  public String charset() {
    return chilkatJNI.CkRsa_charset(swigCPtr, this);
  }

  public String exportPublicKey() {
    return chilkatJNI.CkRsa_exportPublicKey(swigCPtr, this);
  }

  public String exportPrivateKey() {
    return chilkatJNI.CkRsa_exportPrivateKey(swigCPtr, this);
  }

  public String snkToXml(String filename) {
    return chilkatJNI.CkRsa_snkToXml(swigCPtr, this, filename);
  }

  public CkRsa() {
    this(chilkatJNI.new_CkRsa(), true);
  }

}
